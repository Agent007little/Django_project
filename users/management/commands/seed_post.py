from django.contrib.auth.models import User
from django.core.management.base import BaseCommand
from random import choice

from posts.models import Massage, Hashtag, MassageHashtag, PostImage

# python manage.py seed_user --mode=refresh

""" Clear all data and creates posts """
MODE_REFRESH = 'refresh'

""" Clear all data and do not create any object """
MODE_CLEAR = 'clear'


class Command(BaseCommand):
    help = "seed database for testing and development."

    def add_arguments(self, parser):
        parser.add_argument('--mode', type=str, help="Mode")

    def handle(self, *args, **options):
        self.stdout.write('seeding data...')
        run_seed(self, options['mode'])
        self.stdout.write('done.')


def clear_data():
    """Deletes all table data except admin."""
    # logger.info("Delete User instances")
    Massage.objects.all().delete()
    Hashtag.objects.all().delete()
    MassageHashtag.objects.all().delete()
    PostImage.objects.all().delete()
    attach_images_to_messages()


def create_posts():
    """Creates posts"""
    # logger.info("Creating Users in process...")
    create_massages()
    create_hashtags()
    attach_hashtags_to_messages()
    attach_images_to_messages()
    # logger.info("Creating Users completed")


def create_massages():
    users = User.objects.all()[:10]  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    massages_data = [
        {"text": "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! üå≥", "author": users[0], "likes": choice(list(users))},
        {"text": "–£–∂–µ —Å–∫—É—á–∞—é –∑–∞ –ª–µ—Ç–æ–º –∏ –º–æ—Ä–µ–º... üèñÔ∏è", "author": users[1], "likes": choice(list(users))},
        {"text": "–ó–∞–≤—Ç—Ä–∞ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º! üíº", "author": users[2],
         "likes": choice(list(users))},
        {"text": "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ñ–∏–ª—å–º –æ—Å—Ç–∞–≤–∏–ª –≥–ª—É–±–æ–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è! üé¨", "author": users[3],
         "likes": choice(list(users))},
        {"text": "–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ä–æ–≥–∞ –ø—Ä–æ—Å—Ç–æ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π! üç∞", "author": users[4],
         "likes": choice(list(users))},
        {"text": "–•–æ—Ä–æ—à–∞—è –∫–Ω–∏–≥–∞ - –ª—É—á—à–∏–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –¥–æ–ª–≥–æ–π –ø–æ–µ–∑–¥–∫–µ! üìñ", "author": users[5],
         "likes": choice(list(users))},
        {"text": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —É–∂–∏–Ω —Å —Å–µ–º—å–µ–π - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä! üçΩÔ∏è", "author": users[6],
         "likes": choice(list(users))},
        {"text": "–í—Å—Ç—Ä–µ—á–∞ —Å –¥–∞–≤–Ω–∏–º –¥—Ä—É–≥–æ–º –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–ª—à–µ–±–Ω–æ–π! ‚ú®", "author": users[7],
         "likes": choice(list(users))},
        {"text": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π! üí™", "author": users[8],
         "likes": choice(list(users))},
        {"text": "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –∑–∞–≤–ª–∞–¥–µ–ª–∞ –º–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º! üéÆ", "author": users[9],
         "likes": choice(list(users))},
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º likes
        {"text": "–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéØ", "author": users[0],
         "likes": choice(list(users))},
        {"text": "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã! ‚ú®", "author": users[1],
         "likes": choice(list(users))},
        {"text": "–ó–∏–º–Ω–∏–π –≤–µ—á–µ—Ä - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏ —É –∫–∞–º–∏–Ω–∞! üìöüî•", "author": users[2],
         "likes": choice(list(users))},
        {"text": "–ú–µ—á—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ç—å –≤ –Ω–∏—Ö –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üí≠üí™",
         "author": users[3], "likes": choice(list(users))},
        {"text": "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä—É–¥–Ω–æ–≥–æ –¥–Ω—è - –≥–æ—Ä—è—á–∞—è –≤–∞–Ω–Ω–∞ –∏ –ª—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞! üõÅüé∂",
         "author": users[4], "likes": choice(list(users))},
        {"text": "–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –ø–æ—Ä–∞–¥–æ–≤–∞–ª –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏! üç≤üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "author": users[5],
         "likes": choice(list(users))},
        {"text": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ—Ç—å –º–∏—Ä —à–∏—Ä–µ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –∫—É–ª—å—Ç—É—Ä–∞–º–∏! üåç‚úàÔ∏è",
         "author": users[6], "likes": choice(list(users))},
        {"text": "–°–ø–æ—Ä—Ç - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –Ω–æ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥—É—Ö–∞! üí™üßò‚Äç‚ôÇÔ∏è", "author": users[7],
         "likes": choice(list(users))},
        {"text": "–í—Å—Ç—Ä–µ—á–∞ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–¥—Ü–µ —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Ç–µ–ø–ª–æ—Ç–æ–π! ‚ù§Ô∏èüë´", "author": users[8],
         "likes": choice(list(users))},
        {"text": "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å —Å–µ–º—å–µ–π - —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∂–∏–∑–Ω–∏! üë®‚Äçüë©‚Äçüëß‚Äçüë¶‚ù§Ô∏è", "author": users[9],
         "likes": choice(list(users))},
    ]

    for data in massages_data:
        Massage.objects.create(**data)


def create_hashtags():
    hashtags_data = [
        {"name": "#nature"},
        {"name": "#travel"},
        {"name": "#inspiration"},
        {"name": "#movies"},
        {"name": "#food"},
        {"name": "#books"},
        {"name": "#family"},
        {"name": "#friends"},
        {"name": "#fitness"},
        {"name": "#game"},
    ]

    for data in hashtags_data:
        Hashtag.objects.create(**data)


# –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å —Ö—ç—à—Ç–µ–≥–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
def attach_hashtags_to_messages():
    messages = Massage.objects.all()[:10]
    hashtags = Hashtag.objects.all()

    for message in messages:
        hashtag = hashtags[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        MassageHashtag.objects.create(massage_id=message, hashtag_id=hashtag)
        hashtags = hashtags[1:]  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ö—ç—à—Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞


# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def attach_images_to_messages():
    messages = Massage.objects.all()[:5]
    for message in messages:
        PostImage.objects.create(
            link='https://images.ctfassets.net/hrltx12pl8hq/6JHPcrEjyJWnAx8HY5eHWC/57d007fc85fa144bf5492c3651747e75/04-water_1777125524.jpg',
            massage_id=message)


def run_seed(self, mode):
    """ Seed database based on mode
    :param mode: refresh / clear
    :return:
    """
    # Clear data from tables
    clear_data()
    if mode == MODE_CLEAR:
        return

    # Creating posts
    create_posts()
